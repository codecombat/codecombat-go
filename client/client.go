// This file was auto-generated by Fern from our API Definition.

package client

import (
	context "context"
	fmt "fmt"
	codecombatgo "github.com/codecombat/codecombat-go"
	auth "github.com/codecombat/codecombat-go/auth"
	clans "github.com/codecombat/codecombat-go/clans"
	classrooms "github.com/codecombat/codecombat-go/classrooms"
	core "github.com/codecombat/codecombat-go/core"
	stats "github.com/codecombat/codecombat-go/stats"
	users "github.com/codecombat/codecombat-go/users"
	http "net/http"
)

type Client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header

	Auth       *auth.Client
	Clans      *clans.Client
	Classrooms *classrooms.Client
	Stats      *stats.Client
	Users      *users.Client
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
		Auth:       auth.NewClient(opts...),
		Clans:      clans.NewClient(opts...),
		Classrooms: classrooms.NewClient(opts...),
		Stats:      stats.NewClient(opts...),
		Users:      users.NewClient(opts...),
	}
}

// Adds an OAuth2 identity to the user, so that they can be logged in with that identity. You need to send the OAuth code or the access token to this endpoint. 1. If no access token is provided, it will use your OAuth2 token URL to exchange the given code for an access token. 2. Then it will use the access token (given by you, or received from step 1) to look up the user on your service using the lookup URL, and expects a JSON object in response with an `id` property. 3. It will then save that user `id` to the user in our db as a new OAuthIdentity. In this example, we call your lookup URL (let's say, `https://oauth.provider/user?t=<%= accessToken %>`) with the access token (`1234`). The lookup URL returns `{ id: 'abcd' }` in this case, which we save to the user in our db.
//
// The document's `_id` or `slug`.
func (c *Client) PostUsersHandleOAuthIdentities(ctx context.Context, handle string, request *codecombatgo.PostUsersHandleOAuthIdentitiesRequest) (*codecombatgo.UserResponse, error) {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v/o-auth-identities", handle)

	var response *codecombatgo.UserResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

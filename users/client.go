// This file was auto-generated by Fern from our API Definition.

package users

import (
	context "context"
	fmt "fmt"
	codecombatgo "github.com/codecombat/codecombat-go"
	core "github.com/codecombat/codecombat-go/core"
	http "net/http"
	url "net/url"
)

type Client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

// Creates a `User`.
func (c *Client) Create(ctx context.Context, request *codecombatgo.UsersCreateRequest) (*codecombatgo.UserResponse, error) {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "users"

	var response *codecombatgo.UserResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Returns a `User`.
//
// The document's `_id` or `slug`.
func (c *Client) Get(ctx context.Context, handle string, request *codecombatgo.UsersGetRequest) (*codecombatgo.UserResponse, error) {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v", handle)

	queryParams := make(url.Values)
	if request.IncludePlayTime != nil {
		queryParams.Add("includePlayTime", fmt.Sprintf("%v", *request.IncludePlayTime))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *codecombatgo.UserResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Modify name of a `User`
//
// The document's `_id` or `slug`.
func (c *Client) Update(ctx context.Context, handle string, request *codecombatgo.UsersUpdateRequest) (*codecombatgo.UserResponse, error) {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v", handle)

	var response *codecombatgo.UserResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Returns a list of `Classrooms` this user is in (if a student) or owns (if a teacher).
//
// The document's `_id` or `slug`.
func (c *Client) GetClassrooms(ctx context.Context, handle string, request *codecombatgo.UsersGetClassroomsRequest) ([]*codecombatgo.ClassroomResponseWithCode, error) {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v/classrooms", handle)

	queryParams := make(url.Values)
	if request.RetMemberLimit != nil {
		queryParams.Add("retMemberLimit", fmt.Sprintf("%v", *request.RetMemberLimit))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response []*codecombatgo.ClassroomResponseWithCode
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Set the user's hero.
//
// The document's `_id` or `slug`.
func (c *Client) SetHero(ctx context.Context, handle string, request *codecombatgo.UsersSetHeroRequest) (*codecombatgo.UserResponse, error) {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v/hero-config", handle)

	var response *codecombatgo.UserResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Set the user's aceConfig (the settings for the in-game Ace code editor), such as whether to enable autocomplete.
//
// The document's `_id` or `slug`.
func (c *Client) SetAceConfig(ctx context.Context, handle string, request *codecombatgo.UsersSetAceConfigRequest) (*codecombatgo.UserResponse, error) {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v/ace-config", handle)

	var response *codecombatgo.UserResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Grants a user premium access to the "Home" version up to a certain time.
//
// The document's `_id` or `slug`.
func (c *Client) GrantPremiumSubscription(ctx context.Context, handle string, request *codecombatgo.UsersGrantPremiumSubscriptionRequest) (*codecombatgo.UserResponse, error) {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v/subscription", handle)

	var response *codecombatgo.UserResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// If the user already has a premium access up to a certain time, this shortens/revokes his/her premium access. If the ends is less than or equal to the current time, it revokes the subscription and sets the end date to be the current time, else it just shortens the subscription.
//
// The document's `_id` or `slug`.
func (c *Client) ShortenSubscription(ctx context.Context, handle string, request *codecombatgo.UsersShortenSubscriptionRequest) (*codecombatgo.UserResponse, error) {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v/shorten-subscription", handle)

	var response *codecombatgo.UserResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Grants a user access to the "Classroom" version up to a certain time.
// Sets their role to "student".
//
// The document's `_id` or `slug`.
func (c *Client) GrantLicense(ctx context.Context, handle string, request *codecombatgo.UsersGrantLicenseRequest) (*codecombatgo.UserResponse, error) {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v/license", handle)

	var response *codecombatgo.UserResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// If the user already has access to the "Classroom" version up to a certain time, this shortens/revokes his/her access. If the ends is less than or equal to the current time, it revokes the enrollment and sets the end date to be the current time, else it just shortens the enrollment.
//
// The document's `_id` or `slug`.
func (c *Client) ShortenLicense(ctx context.Context, handle string, request *codecombatgo.UsersShortenLicenseRequest) (*codecombatgo.UserResponse, error) {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v/shorten-license", handle)

	var response *codecombatgo.UserResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Redirects to `/users/{handle}` given a unique, identifying property
//
// The property to lookup by. May either be `"israel-id"` or `"name"`.
// The value to be looked up.
func (c *Client) Lookup(ctx context.Context, property string, value string) error {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"user-lookup/%v/%v", property, value)

	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		nil,
		false,
		c.header,
		nil,
	); err != nil {
		return err
	}
	return nil
}

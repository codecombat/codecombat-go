// This file was auto-generated by Fern from our API Definition.

package stats

import (
	context "context"
	fmt "fmt"
	codecombatgo "github.com/codecombat/codecombat-go"
	core "github.com/codecombat/codecombat-go/core"
	http "net/http"
	url "net/url"
)

type Client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

// Returns the playtime stats
func (c *Client) GetPlaytimeStats(ctx context.Context, request *codecombatgo.StatsGetPlaytimeStatsRequest) (*codecombatgo.PlaytimeStatsResponse, error) {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "playtime-stats"

	queryParams := make(url.Values)
	if request.StartDate != nil {
		queryParams.Add("startDate", fmt.Sprintf("%v", *request.StartDate))
	}
	if request.EndDate != nil {
		queryParams.Add("endDate", fmt.Sprintf("%v", *request.EndDate))
	}
	if request.Country != nil {
		queryParams.Add("country", fmt.Sprintf("%v", *request.Country))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *codecombatgo.PlaytimeStatsResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Returns the license stats
func (c *Client) GetLicenseStats(ctx context.Context) (*codecombatgo.LicenseStatsResponse, error) {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "license-stats"

	var response *codecombatgo.LicenseStatsResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

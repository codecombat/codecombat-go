// This file was auto-generated by Fern from our API Definition.

package auth

import (
	context "context"
	fmt "fmt"
	codecombatgo "github.com/codecombat/codecombat-go"
	core "github.com/codecombat/codecombat-go/core"
	http "net/http"
	url "net/url"
)

type Client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

// Logs a user in. In this example, we call your lookup URL (let's say, `https://oauth.provider/user?t=<%= accessToken %>`) with the access token (`1234`). The lookup URL returns `{ id: 'abcd' }` in this case. We will match this `id` with the OAuthIdentity stored in the user information in our db. If everything checks out, the user is logged in and redirected to the home page.
func (c *Client) LoginOauth(ctx context.Context, request *codecombatgo.LoginOauthRequest) error {
	baseURL := "https://codecombat.com/api"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "auth/login-o-auth"

	queryParams := make(url.Values)
	queryParams.Add("provider", fmt.Sprintf("%v", request.Provider))
	if request.AccessToken != nil {
		queryParams.Add("accessToken", fmt.Sprintf("%v", *request.AccessToken))
	}
	if request.Code != nil {
		queryParams.Add("code", fmt.Sprintf("%v", *request.Code))
	}
	if request.Redirect != nil {
		queryParams.Add("redirect", fmt.Sprintf("%v", *request.Redirect))
	}
	if request.ErrorRedirect != nil {
		queryParams.Add("errorRedirect", fmt.Sprintf("%v", *request.ErrorRedirect))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		request,
		nil,
		false,
		c.header,
		nil,
	); err != nil {
		return err
	}
	return nil
}
